{"version":3,"file":"main.2962aa40bf800c69.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/core/helpers/error.interceptor.ts","./src/app/core/services/authentication/authentication.service.ts","./src/app/core/services/common/common.service.ts","./src/app/modules/auth/services/auth-http/auth-http.service.ts","./src/app/modules/auth/services/auth-http/index.ts","./src/app/modules/auth/services/auth.guard.ts","./src/app/modules/auth/services/auth.service.ts","./src/environments/environment.prod.ts","./src/main.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AuthGuard } from './modules/auth/services/auth.guard';\r\n\r\nexport const routes: Routes = [\r\n  {\r\n    path: 'auth',\r\n    loadChildren: () =>\r\n      import('./modules/auth/auth.module').then((m) => m.AuthModule),\r\n  },\r\n  {\r\n    path: 'error',\r\n    loadChildren: () =>\r\n      import('./modules/errors/errors.module').then((m) => m.ErrorsModule),\r\n  },\r\n  {\r\n    path: '',\r\n    canActivate: [AuthGuard],\r\n    loadChildren: () =>\r\n      import('./theme/layout/layout.module').then((m) => m.LayoutModule),\r\n  },\r\n  { path: '**', redirectTo: 'error/404' },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  // eslint-disable-next-line @angular-eslint/component-selector\r\n  selector: 'body[root]',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  constructor() {}\r\n}\r\n","<router-outlet></router-outlet>\r\n","import {\r\n  HTTP_INTERCEPTORS,\r\n  HttpClient,\r\n  HttpClientModule,\r\n} from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\r\nimport { InlineSVGModule } from 'ng-inline-svg-2';\r\nimport { ClipboardModule } from 'ngx-clipboard';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { ErrorInterceptor } from './core/helpers/error.interceptor';\r\n// import { MessagingService } from './core/services/firebase-message/firebase-message.service';\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    TranslateModule.forRoot(),\r\n    HttpClientModule,\r\n    ClipboardModule,\r\n    ToastrModule.forRoot(),\r\n    AppRoutingModule,\r\n    InlineSVGModule.forRoot(),\r\n    NgbModule,\r\n    // AngularFireMessagingModule,\r\n    // AngularFireModule.initializeApp(environment.firebaseConfig),\r\n  ],\r\n  providers: [\r\n    { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\r\n    // MessagingService,\r\n  ],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n// required for AOT compilation\r\nexport function HttpLoaderFactory(http: HttpClient): TranslateHttpLoader {\r\n  return new TranslateHttpLoader(http);\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n} from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { AuthenticationService } from '../services/authentication/authentication.service';\r\n\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n  constructor(private authenticationService: AuthenticationService) {}\r\n\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    return next.handle(request).pipe(\r\n      catchError((err) => {\r\n        if (err.status === 401) {\r\n          // auto logout if 401 response returned from api\r\n          this.authenticationService.logout();\r\n          // location.reload();\r\n        }\r\n\r\n        const error = err.error.message || err.statusText;\r\n        return throwError(error);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { CommonService } from '../common/common.service';\r\nimport { ApiResponse } from '../../model/api-response.models';\r\nimport { catchError, retry } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthenticationService {\r\n  private apiURL: string = environment.API_ENDPOINT;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private commonService: CommonService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      Authorization: 'bearer ' + localStorage.getItem('token'),\r\n    }),\r\n  };\r\n\r\n  adminLogin(obj: any) {\r\n    return this.http\r\n      .post<ApiResponse>(this.apiURL + 'admin/admin_login', obj)\r\n      .pipe(retry(1), catchError(this.commonService.handleError));\r\n  }\r\n\r\n  logout() {\r\n    localStorage.clear();\r\n    this.router.navigate(['/auth/login']);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpHeaders } from '@angular/common/http';\r\nimport { throwError } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CommonService {\r\n  public apiURL: string = environment.API_ENDPOINT;\r\n\r\n  constructor() {}\r\n\r\n  handleError(error: any) {\r\n    let errorMessage = '';\r\n\r\n    if (error.error instanceof ErrorEvent) {\r\n      // Get client-side error\r\n      errorMessage = error.error.message;\r\n    } else if (error.status === 401) {\r\n      errorMessage = error.status;\r\n    } else {\r\n      // Get server-side error\r\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n    }\r\n    // window.alert(errorMessage);\r\n    return throwError(errorMessage);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { UserModel } from '../../models/user.model';\r\nimport { environment } from '../../../../../environments/environment';\r\n// import { AuthModel } from '../../models/auth.model';\r\n\r\nconst API_USERS_URL = `${environment.API_ENDPOINT}/auth`;\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthHTTPService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // public methods\r\n  // login(email: string, password: string): Observable<any> {\r\n  // return this.http.post<AuthModel>(`${API_USERS_URL}/login`, {\r\n  //   email,\r\n  //   password,\r\n  // });\r\n  // }\r\n\r\n  // CREATE =>  POST: add a new user to the server\r\n  // createUser(user: UserModel): Observable<UserModel> {\r\n  //   return this.http.post<UserModel>(API_USERS_URL, user);\r\n  // }\r\n\r\n  // Your server should check email => If email exists send link to the user and return true | If email doesn't exist return false\r\n  // forgotPassword(email: string): Observable<boolean> {\r\n  //   return this.http.post<boolean>(`${API_USERS_URL}/forgot-password`, {\r\n  //     email,\r\n  //   });\r\n  // }\r\n\r\n  // getUserByToken(token: string): Observable<UserModel> {\r\n  //   const httpHeaders = new HttpHeaders({\r\n  //     Authorization: `Bearer ${token}`,\r\n  //   });\r\n  //   return this.http.get<UserModel>(`${API_USERS_URL}/me`, {\r\n  //     headers: httpHeaders,\r\n  //   });\r\n  // }\r\n}\r\n","// #fake-start#\r\n// export { AuthHTTPService } from './fake/auth-fake-http.service'; // You have to comment this, when your real back-end is done\r\n// #fake-end#\r\n\r\n// #real-start#\r\nexport { AuthHTTPService } from './auth-http.service'; // You have to uncomment this, when your real back-end is done\r\n// #real-end#\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  CanActivate,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n  Router,\r\n} from '@angular/router';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    // const currentUser = this.authService.currentUserValue;\r\n\r\n    const currentUser = localStorage.getItem('userId');\r\n    // const currentUserType = localStorage.getItem('role');\r\n    if (currentUser) {\r\n      return true;\r\n      //   if (currentUserType === 'ADMIN' || currentUserType === 'INTERNAL') {\r\n      //     return true;\r\n      //   } else {\r\n      //     this.router.navigate(['/s']);\r\n      //     // logged in so return true\r\n      //     return false;\r\n      //   }\r\n    }\r\n\r\n    // not logged in so redirect to login page with the return url\r\n    this.authService.logout();\r\n    // localStorage.clear();\r\n    // this.router.navigate(['/auth/login'], {\r\n    //   queryParams: { returnUrl: state.url },\r\n    // });\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Observable, BehaviorSubject, of, Subscription } from 'rxjs';\r\nimport { map, catchError, switchMap, finalize } from 'rxjs/operators';\r\nimport { UserModel } from '../models/user.model';\r\n// import { AuthModel } from '../models/auth.model';\r\nimport { AuthHTTPService } from './auth-http';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Router } from '@angular/router';\r\n\r\nexport type UserType = UserModel | undefined;\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService implements OnDestroy {\r\n  // private fields\r\n  private unsubscribe: Subscription[] = []; // Read more: => https://brianflove.com/2016/12/11/anguar-2-unsubscribe-observables/\r\n  // private authLocalStorageToken = `${environment.appVersion}-${environment.USERDATA_KEY}`;\r\n\r\n  // public fields\r\n  currentUser$: Observable<UserType>;\r\n  isLoading$: Observable<boolean>;\r\n  currentUserSubject: BehaviorSubject<UserType>;\r\n  isLoadingSubject: BehaviorSubject<boolean>;\r\n\r\n  get currentUserValue(): UserType {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  set currentUserValue(user: UserType) {\r\n    this.currentUserSubject.next(user);\r\n  }\r\n\r\n  constructor(\r\n    private authHttpService: AuthHTTPService,\r\n    private router: Router\r\n  ) {\r\n    this.isLoadingSubject = new BehaviorSubject<boolean>(false);\r\n    this.currentUserSubject = new BehaviorSubject<UserType>(undefined);\r\n    this.currentUser$ = this.currentUserSubject.asObservable();\r\n    this.isLoading$ = this.isLoadingSubject.asObservable();\r\n    // const subscr = this.getUserByToken().subscribe();\r\n    // this.unsubscribe.push(subscr);\r\n  }\r\n\r\n  // public methods\r\n  // login(email: string, password: string): Observable<UserType> {\r\n  //   this.isLoadingSubject.next(true);\r\n  //   return this.authHttpService.login(email, password).pipe(\r\n  //     map((auth: AuthModel) => {\r\n  //       const result = this.setAuthFromLocalStorage(auth);\r\n  //       return result;\r\n  //     }),\r\n  //     switchMap(() => this.getUserByToken()),\r\n  //     catchError((err) => {\r\n  //       console.error('err', err);\r\n  //       return of(undefined);\r\n  //     }),\r\n  //     finalize(() => this.isLoadingSubject.next(false))\r\n  //   );\r\n  // }\r\n\r\n  logout() {\r\n    // localStorage.removeItem(this.authLocalStorageToken);\r\n    this.router.navigate(['/auth/login'], {\r\n      queryParams: {},\r\n    });\r\n  }\r\n\r\n  // getUserByToken(): Observable<UserType> {\r\n  //   const auth = this.getAuthFromLocalStorage();\r\n  //   if (!auth || !auth.authToken) {\r\n  //     return of(undefined);\r\n  //   }\r\n\r\n  //   this.isLoadingSubject.next(true);\r\n  //   return this.authHttpService.getUserByToken(auth.authToken).pipe(\r\n  //     map((user: UserType) => {\r\n  //       if (user) {\r\n  //         this.currentUserSubject.next(user);\r\n  //       } else {\r\n  //         this.logout();\r\n  //       }\r\n  //       return user;\r\n  //     }),\r\n  //     finalize(() => this.isLoadingSubject.next(false))\r\n  //   );\r\n  // }\r\n\r\n  // need create new user then login\r\n  // registration(user: UserModel): Observable<any> {\r\n  //   this.isLoadingSubject.next(true);\r\n  //   return this.authHttpService.createUser(user).pipe(\r\n  //     map(() => {\r\n  //       this.isLoadingSubject.next(false);\r\n  //     }),\r\n  //     switchMap(() => this.login(user.email, user.password)),\r\n  //     catchError((err) => {\r\n  //       console.error('err', err);\r\n  //       return of(undefined);\r\n  //     }),\r\n  //     finalize(() => this.isLoadingSubject.next(false))\r\n  //   );\r\n  // }\r\n\r\n  // forgotPassword(email: string): Observable<boolean> {\r\n  //   this.isLoadingSubject.next(true);\r\n  //   return this.authHttpService\r\n  //     .forgotPassword(email)\r\n  //     .pipe(finalize(() => this.isLoadingSubject.next(false)));\r\n  // }\r\n\r\n  // private methods\r\n  // private setAuthFromLocalStorage(auth: AuthModel): boolean {\r\n  // store auth authToken/refreshToken/epiresIn in local storage to keep user logged in between page refreshes\r\n  // if (auth && auth.authToken) {\r\n  // localStorage.setItem(this.authLocalStorageToken, JSON.stringify(auth));\r\n  // return true;\r\n  // }\r\n  // return false;\r\n  // }\r\n\r\n  // private getAuthFromLocalStorage(): AuthModel | undefined {\r\n  //   try {\r\n  //     const lsValue = localStorage.getItem(this.authLocalStorageToken);\r\n  //     if (!lsValue) {\r\n  //       return undefined;\r\n  //     }\r\n\r\n  //     const authData = JSON.parse(lsValue);\r\n  //     const authData = JSON.parse(\"{ lsValue: 'test' }\");\r\n  //     return authData;\r\n  //   } catch (error) {\r\n  //     console.error(error);\r\n  //     return undefined;\r\n  //   }\r\n  // }\r\n\r\n  ngOnDestroy() {\r\n    this.unsubscribe.forEach((sb) => sb.unsubscribe());\r\n  }\r\n}\r\n","export const environment = {\r\n  production: true,\r\n  API_ENDPOINT: 'https://accounts.mettholidays.ae/v2/api/',\r\n  // API_ENDPOINT: 'http://3.29.100.110:3001/v2/api/', // LIVE IP\r\n  // API_ENDPOINT: 'http://3.29.100.110:3000/v2/api/', // TEST IP\r\n  ADMIN_ID: 'a165fccd-2bbe-4391-9ea9-a237b1fb7c82',\r\n  SUB_ADMIN_ID: 'e5e069e0-1914-4fc9-bd4a-90487fce89ea',\r\n  // firebaseConfig: {\r\n  //   apiKey: 'AIzaSyCR-3WZBUiZuSSgdoH63x5WSUsGSSFBtjU',\r\n  //   authDomain: 'vendor-5c444.firebaseapp.com',\r\n  //   projectId: 'vendor-5c444',\r\n  //   storageBucket: 'vendor-5c444.appspot.com',\r\n  //   messagingSenderId: '1063137373466',\r\n  //   appId: '1:1063137373466:web:30d81cb6394987422450a3',\r\n  //   measurementId: 'G-03NWFZSKSS',\r\n  // },\r\n};\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic()\r\n  .bootstrapModule(AppModule)\r\n  .catch((err) => console.error(err));\r\n"],"names":[],"sourceRoot":"webpack:///"}